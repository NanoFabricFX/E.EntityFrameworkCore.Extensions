<?xml version="1.0"?>
<doc>
    <assembly>
        <name>E.EntityFrameworkCore.Extensions</name>
    </assembly>
    <members>
        <member name="T:E.CheckUseDefaultStringMaxLenghtResult">
            <summary>
            检查字符串类型字段长度限制返回结果
            </summary>
        </member>
        <member name="M:E.CheckUseDefaultStringMaxLenghtResult.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:E.CheckUseDefaultStringMaxLenghtResult.#ctor(System.Boolean,System.Nullable{System.Int32})">
            <summary>
            构造函数
            </summary>
            <param name="success">是否成功</param>
            <param name="maxLength">最大长度</param>
        </member>
        <member name="P:E.CheckUseDefaultStringMaxLenghtResult.Success">
            <summary>
            是否成功
            </summary>
        </member>
        <member name="P:E.CheckUseDefaultStringMaxLenghtResult.MaxLength">
            <summary>
            自定义长度
            </summary>
        </member>
        <member name="T:E.ColumnNameCaseType">
            <summary>
            列转换类型
            </summary>
        </member>
        <member name="F:E.ColumnNameCaseType.Default">
            <summary>
            默认不做处理
            </summary>
        </member>
        <member name="F:E.ColumnNameCaseType.Upper">
            <summary>
            转大写
            </summary>
        </member>
        <member name="F:E.ColumnNameCaseType.Lower">
            <summary>
            转小写
            </summary>
        </member>
        <member name="T:E.EntityFrameworkCoreTableViewExtensions">
            <summary>
            EntityFrameworkCore 表和视图的扩展
            [Extension to the EntityFrameworkCore table and view]
            </summary>
        </member>
        <member name="P:E.EntityFrameworkCoreTableViewExtensions.CaseType">
            <summary>
            列名大小写转换类型,默认为不转换
            [Enables uppercase, false by default, and lowercase by default]
            </summary>
        </member>
        <member name="P:E.EntityFrameworkCoreTableViewExtensions.UseDefaultStringMaxLength">
            <summary>
            启用设置字符串默认长度,默认为 false
            [Sets the default length of the string to false by default]
            </summary>
        </member>
        <member name="P:E.EntityFrameworkCoreTableViewExtensions.DefaultStringMaxLength">
            <summary>
            默认字符串使用的长度 (默认 512)
            [The length of the default string used (default 512)]
            </summary>
        </member>
        <member name="P:E.EntityFrameworkCoreTableViewExtensions.ColumnCheck">
            <summary>
            外部自定义属性映射到字段检查方法
            [External custom attributes map to field inspection methods]
            </summary>
        </member>
        <member name="P:E.EntityFrameworkCoreTableViewExtensions.DbMapTypes">
            <summary>
            所有允许映射到数据库的字段类型(谨慎更改)
            [All field types that allow mapping to the database (changed carefully)]
            </summary>
        </member>
        <member name="P:E.EntityFrameworkCoreTableViewExtensions.DbSetTypeStr">
            <summary>
            DbSet 类型字符串(谨慎修改)
            [DbSet type string (carefully modified)]
            </summary>
        </member>
        <member name="P:E.EntityFrameworkCoreTableViewExtensions.DbSetCheck">
            <summary>
            外部自定义 DbSet 是否处理的检查方法
            [External custom DbSet whether to handle the check method]
            </summary>
        </member>
        <member name="P:E.EntityFrameworkCoreTableViewExtensions.UseColumnNameMaxLength">
            <summary>
            启用列名最大长度限制,默认为fasle
            [Enables the maximum length limit for column names, which is fasle by default]
            </summary>
        </member>
        <member name="P:E.EntityFrameworkCoreTableViewExtensions.ColumnNameMaxLength">
            <summary>
            列名最大长度,默认30
            [Column name maximum length, default 30]
            </summary>
        </member>
        <member name="P:E.EntityFrameworkCoreTableViewExtensions.IEntityTypeConfigurationTypeStr">
            <summary>
            IEntityTypeConfiguration 接口字符串
            </summary>
        </member>
        <member name="P:E.EntityFrameworkCoreTableViewExtensions.UseDbSetNameToTableName">
            <summary>
            使用DbSet名称为数据库表名称
            </summary>
        </member>
        <member name="P:E.EntityFrameworkCoreTableViewExtensions.UseDbQueryNameToViewName">
            <summary>
            使用DbQuery名称作为数据库视图名称
            </summary>
        </member>
        <member name="P:E.EntityFrameworkCoreTableViewExtensions.CheckUseDefaultStringMaxLength">
            <summary>
            外部自定义 设置字符串类型列数据长度 是否处理的检查方法
            </summary>
        </member>
        <member name="P:E.EntityFrameworkCoreTableViewExtensions.TableAttr">
            <summary>
            表特性类型
            [Table property type]
            </summary>
        </member>
        <member name="P:E.EntityFrameworkCoreTableViewExtensions.ColumnAttr">
            <summary>
            列特性类型
            [Column attribute type]
            </summary>
        </member>
        <member name="P:E.EntityFrameworkCoreTableViewExtensions.NoMappedAttribute">
            <summary>
            不映射特性类型
            [Attribute types are not mapped]
            </summary>
        </member>
        <member name="P:E.EntityFrameworkCoreTableViewExtensions.StringType">
            <summary>
            字符串类型
            [String type]
            </summary>
        </member>
        <member name="P:E.EntityFrameworkCoreTableViewExtensions.StringLengthAttr">
            <summary>
            字符串长度特性类型
            [String length attribute type]
            </summary>
        </member>
        <member name="P:E.EntityFrameworkCoreTableViewExtensions.EntityCfgTypes">
            <summary>
            实现 IEntityTypeConfiguration 类型的集合
            </summary>
        </member>
        <member name="M:E.EntityFrameworkCoreTableViewExtensions.CaseAllDbSetNameAndColumnName``1(Microsoft.EntityFrameworkCore.ModelBuilder,System.Boolean)">
            <summary>
            设置DbContext的所有DbSet 对应的 表名和列名
            [Set the table and column names for all dbsets of the DbContext]
            </summary>
            <typeparam name="TDbContext"></typeparam>
            <param name="builder"></param>
            <param name="ignoreExistEntityTypeConfigurations"></param>
            <returns></returns>
        </member>
        <member name="M:E.EntityFrameworkCoreTableViewExtensions.CaseTableNameAndAllCloumName(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.String,System.String)">
            <summary>
            自动将表名和列名转换大小写,部分特殊列需要手动处理
            [Automatically converts table and column names to case, and some special columns need to be handled manually]
            </summary>
            <param name="builder"></param>
            <param name="tableName"></param>
            <param name="schema"></param>
            <returns></returns>
        </member>
        <member name="M:E.EntityFrameworkCoreTableViewExtensions.CaseTableName(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.String,System.String)">
            <summary>
            设置表名和Schema [Set the table name and Schema]
            优先级:
            * 传入的 tableName 和 schema
            * 实体标记的 TableAttribute
            * 实体名称, schema 不设置
            </summary>
            <param name="builder"></param>
            <param name="tableName"></param>
            <param name="schema"></param>
            <returns></returns>
        </member>
        <member name="M:E.EntityFrameworkCoreTableViewExtensions.CaseViewNameAndAllCloumName(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.String,System.String)">
            <summary>
            自动将视图名和列名转换大小写,部分特殊列需要手动处理
            [Automatically converts view and column names to case, and some special columns need to be handled manually]
            </summary>
            <param name="builder"></param>
            <param name="viewName"></param>
            <param name="schema"></param>
            <returns></returns>
        </member>
        <member name="M:E.EntityFrameworkCoreTableViewExtensions.CaseViewName(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.String,System.String)">
            <summary>
            设置视图名称和Schema [Set the view name and Schema]
            优先级:
            * 传入的 tableName 和 schema
            * 实体标记的 TableAttribute
            * 实体名称, schema 不设置
            </summary>
            <param name="builder"></param>
            <param name="viewName"></param>
            <param name="schema"></param>
            <returns></returns>
        </member>
        <member name="M:E.EntityFrameworkCoreTableViewExtensions.CaseViewName(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.String)">
            <summary>
            转换视图名称
            </summary>
            <param name="entityTypeBuilder"></param>
            <param name="str"></param>
        </member>
        <member name="M:E.EntityFrameworkCoreTableViewExtensions.CaseAllColumnName(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder)">
            <summary>
            设置所有列名,部分特殊列需要手动处理
            [Set all column names. Some special columns need to be handled manually]
            </summary>
            <param name="builder"></param>
            <returns></returns>
        </member>
        <member name="M:E.EntityFrameworkCoreTableViewExtensions.CaseColumnName(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder,System.String)">
            <summary>
            设置列名 [Set the column name]
            优先级:
            * 字段标记的 ColumnAttribute 的 Name
            * 传入的 columnName
            * fieldName
            </summary>
            <param name="property"></param>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:E.EntityFrameworkCoreTableViewExtensions.CaseColumnName``2(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String)">
            <summary>
            设置列名(自动转换为大小写)
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TProperty"></typeparam>
            <param name="builder">ModelBuiler</param>
            <param name="propertyExpression">属性表达式</param>
            <param name="columnName">指定列名(不填则使用属性名称)</param>
            <returns></returns>
        </member>
        <member name="M:E.EntityFrameworkCoreTableViewExtensions.CaseColumnName``1(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.String,System.String)">
            <summary>
            设置列名(自动转换为大小写)
            </summary>
            <typeparam name="TProperty"></typeparam>
            <param name="builder">ModelBuiler</param>
            <param name="fieldName">字段(属性名称)</param>
            <param name="columnName">指定列名(不填则使用属性名称)</param>
            <returns>Property Builder</returns>
        </member>
        <member name="M:E.EntityFrameworkCoreTableViewExtensions.CheckPropIsColumn(System.Reflection.PropertyInfo)">
            <summary>
            检查属性是否为可映射到数据库
            [Check if the property is mappable to the database]
            </summary>
            <param name="property"></param>
            <returns>是返回true，否返回false</returns>
        </member>
        <member name="M:E.EntityFrameworkCoreTableViewExtensions.CheckPropIsStringAndNoSetMaxLength(System.Reflection.PropertyInfo)">
            <summary>
            检查属性是否是字符串类型,且没有设置长度
            [Checks whether the property is of type string and does not set the length]
            </summary>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:E.EntityFrameworkCoreTableViewExtensions.CheckStatic(System.Reflection.PropertyInfo)">
            <summary>
            检查是否是静态成员
            [Check if it is a static member]
            </summary>
            <returns></returns>
        </member>
        <member name="M:E.EntityFrameworkCoreTableViewExtensions.CheckEnum(System.Reflection.PropertyInfo)">
            <summary>
            检查是否为枚举
            [Check if it is an enumeration]
            </summary>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:E.EntityFrameworkCoreTableViewExtensions.GetTableAttribute(System.Type)">
            <summary>
            获取 TableAttribute
            [Get TableAttribute]
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:E.EntityFrameworkCoreTableViewExtensions.GetColumnAttribute(System.Type)">
            <summary>
            获取 ColumnAttribute
            [Get ColumnAttribute]
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:E.EntityFrameworkCoreTableViewExtensions.GetColumnAttribute(System.Reflection.PropertyInfo)">
            <summary>
            获取 ColumnAttribute
            [Get ColumnAttribute]
            </summary>
            <param name="propertyInfo"></param>
            <returns></returns>
        </member>
        <member name="M:E.EntityFrameworkCoreTableViewExtensions.GetDbSetOrDbQueryTypeStr(System.Type)">
            <summary>
            获取 DbSet 或 DbQuery 类型字符串
            [Gets the DbSet type string]
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:E.EntityFrameworkCoreTableViewExtensions.GetDbSetOrDbQueryTypeStr(System.Reflection.PropertyInfo)">
            <summary>
            获取 DbSet 或 DbQuery 类型字符串
            [Get the DbSet or DbQuery type string]
            </summary>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:E.EntityFrameworkCoreTableViewExtensions.GetDbSetOrDbQueryType(System.Reflection.PropertyInfo)">
            <summary>
            获取 DbSet 或 DbQuery 类型
            [Get the DbSet or DbQuery type]
            </summary>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:E.EntityFrameworkCoreTableViewExtensions.C(System.String)">
            <summary>
            根据配置的转换类型转换大小写
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:E.EntityFrameworkCoreTableViewExtensions.SetCaseType(Microsoft.EntityFrameworkCore.ModelBuilder,E.ColumnNameCaseType)">
            <summary>
            设置转换类型
            </summary>
            <param name="modelBuilder"></param>
            <param name="caseType"></param>
        </member>
        <member name="M:E.EntityFrameworkCoreTableViewExtensions.SetCaseType(E.ColumnNameCaseType)">
            <summary>
            设置转换类型
            </summary>
            <param name="caseType"></param>
        </member>
        <member name="M:E.EntityFrameworkCoreTableViewExtensions.C(System.String,System.Boolean)">
            <summary>
            转换字符串大小写
            [Converts string case]
            </summary>
            <param name="str"></param>
            <param name="isColum"></param>
            <returns></returns>
        </member>
        <member name="M:E.EntityFrameworkCoreTableViewExtensions.IgnoreExistEntityTypeConfigurations``1(System.Reflection.PropertyInfo)">
            <summary>
            忽略已存在的 EntityTypeConfiguration 校验函数
            [The existing EntityTypeConfiguration validation function is ignored]
            </summary>
            <typeparam name="TDbContext"></typeparam>
            <param name="property"></param>
            <returns></returns>
        </member>
    </members>
</doc>
